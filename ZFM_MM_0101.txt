FUNCTION ZFM_MM_0101.
*"----------------------------------------------------------------------
*"*"Local Interface:
*"  TABLES
*"      T_MATNR STRUCTURE  ZSEL_MATNR
*"      T_EMATN STRUCTURE  ZSEL_EMATN
*"      T_WERKS STRUCTURE  ZSEL_WERKS
*"      T_LGORT STRUCTURE  ZSEL_LGORT
*"      T_CHARG STRUCTURE  ZSEL_CHARG
*"      T_MCHB STRUCTURE  ZSMM_MCHB
*"      T_AMPL STRUCTURE  AMPL
*"      T_EKBE STRUCTURE  ZST_EKBE
*"----------------------------------------------------------------------
  REFRESH : T_MCHB , T_AMPL .

* prepare AMPL (MPN Material) data

  IF T_EMATN[] IS NOT INITIAL.
    SELECT * FROM AMPL INTO TABLE T_AMPL
      WHERE EMATN IN T_EMATN AND WERKS IN T_WERKS.
    IF SY-SUBRC = 0.

      LT_EMATR[] = T_AMPL[].

      LOOP AT T_AMPL INTO LW_AMPL.
        T_MATNR-SIGN = 'I'.
        T_MATNR-OPTION = 'EQ'.
        T_MATNR-LOW = LW_AMPL-BMATN.

        APPEND: T_MATNR .
        APPEND: T_MATNR TO R_MATNR_AMPL.
      ENDLOOP.

    ENDIF.

  ENDIF.

* prepare MCHB (Stcok) data

  SELECT MATNR WERKS LGORT CHARG CLABS
         CUMLM CINSM CEINM CSPEM CRETM
         CVMLA CVMUM CVMIN CVMEI CVMSP
         CVMRE
  FROM MCHB INTO TABLE T_MCHB
  WHERE MATNR IN T_MATNR
    AND WERKS IN T_WERKS
    AND LGORT IN T_LGORT
    AND CHARG IN T_CHARG
    AND CLABS > 0.

  IF SY-SUBRC = 0.
    LT_MCHB[] = T_MCHB[].
    IF T_EMATN[] IS NOT INITIAL.
      DELETE LT_MCHB WHERE MATNR IN R_MATNR_AMPL.
    ENDIF.

    LT_MATNR[] = LT_MCHB[].

    IF LT_MCHB[] IS NOT INITIAL.
      SORT LT_MCHB BY MATNR.
      DELETE ADJACENT DUPLICATES FROM LT_MCHB COMPARING MATNR.
      SELECT * FROM AMPL APPENDING TABLE T_AMPL
      FOR ALL ENTRIES IN LT_MCHB
      WHERE BMATN = LT_MCHB-MATNR AND WERKS IN T_WERKS.
    ENDIF.

  ENDIF.

* prepare MESEG (Stock from movement) data

  IF LT_EMATR[] IS NOT INITIAL.

    SELECT EMATN WERKS CHARG MATNR
           MENGE MEINS EBELN EBELP
           MATNR WERKS CHARG
    FROM MSEG INTO  TABLE T_EKBE
    FOR ALL ENTRIES IN LT_EMATR
    WHERE BWART = '101'
    AND EMATN = LT_EMATR-EMATN
    AND WERKS = LT_EMATR-WERKS.

  ENDIF.

  IF LT_MATNR[] IS NOT INITIAL.

    SELECT EMATN WERKS CHARG MATNR
           MENGE MEINS EBELN EBELP
           MATNR WERKS CHARG
    FROM MSEG
    APPENDING TABLE T_EKBE
    FOR ALL ENTRIES IN LT_MATNR
    WHERE BWART = '101'
      AND MATNR = LT_MATNR-MATNR
      AND WERKS = LT_MATNR-WERKS
      AND CHARG = LT_MATNR-CHARG.


    LOOP AT T_EKBE INTO LW_EKBE.

      READ TABLE LT_MATNR  WITH KEY MATNR = LW_EKBE-MATNR
                                    WERKS = LW_EKBE-WERKS
                                    CHARG = LW_EKBE-CHARG
                                    TRANSPORTING NO FIELDS.
      IF SY-SUBRC = 0.
        DELETE LT_MATNR INDEX SY-TABIX.
      ENDIF.

    ENDLOOP.


    IF LT_MATNR[] IS NOT INITIAL.

      SELECT EMATN WERKS CHARG MATNR
               MENGE MEINS EBELN EBELP
               UMMAT UMWRK UMCHA
        FROM MSEG
        INTO TABLE LT_EKBE
        FOR ALL ENTRIES IN LT_MATNR
        WHERE BWART = '309'
          AND MATNR = LT_MATNR-MATNR
          AND WERKS = LT_MATNR-WERKS
          AND UMCHA = LT_MATNR-CHARG
          AND CHARG = LT_MATNR-CHARG.


        LOOP AT LT_EKBE INTO LW_EKBE.

          PERFORM DFS USING LW_EKBE-UMMAT LW_EKBE-WERKS LW_EKBE-CHARG.

          IF LT_VISITED[] IS NOT INITIAL.

            SELECT EMATN WERKS CHARG MATNR
               MENGE MEINS EBELN EBELP
            FROM MSEG APPENDING TABLE T_EKBE
            FOR ALL ENTRIES IN LT_VISITED
            WHERE BWART = '101'
            AND MATNR = LT_VISITED-UMMAT
            AND WERKS = LW_EKBE-WERKS
            AND CHARG = LW_EKBE-CHARG.

            LOOP AT T_EKBE ASSIGNING <FS_TABLE>.

              IF <FS_TABLE>-UMMAT IS INITIAL.

                <FS_TABLE>-UMMAT = LW_EKBE-MATNR.
                <FS_TABLE>-UMWRK = LW_EKBE-WERKS.
                <FS_TABLE>-UMCHA = LW_EKBE-CHARG.

              ENDIF.

            ENDLOOP.

          ENDIF.

          REFRESH LT_VISITED.

        ENDLOOP.

    ENDIF.

  ENDIF.

ENDFUNCTION.
